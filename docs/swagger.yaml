basePath: /api
definitions:
  handler.CreateColorRequest:
    properties:
      code:
        example: BLACK
        type: string
      hex_color:
        example: '#000000'
        type: string
      name:
        example: 黑色
        type: string
    required:
    - name
    type: object
  handler.CreateProductRequest:
    properties:
      colors:
        example:
        - '[''黑色'''
        - '''白色'''
        - '''蓝色'']'
        items:
          type: string
        type: array
      cost_price:
        example: 5999
        type: number
      discount_price:
        example: 6799
        type: number
      images:
        description: 商品图片列表
        items:
          $ref: '#/definitions/model.ProductImage'
        type: array
      is_discounted:
        example: true
        type: boolean
      is_enabled:
        example: true
        type: boolean
      name:
        example: iPhone 14
        type: string
      price:
        example: 6999
        type: number
      shipping_time:
        example: 三天
        type: string
      sku:
        example: IPHONE14-128G-BLACK
        type: string
      source_id:
        description: 货源ID
        example: 1
        type: integer
    required:
    - cost_price
    - name
    - price
    - sku
    type: object
  handler.CreateSourceRequest:
    properties:
      code:
        example: APPLE001
        type: string
      name:
        example: Apple官方旗舰店
        type: string
      remark:
        example: 优质货源
        type: string
      status:
        example: 1
        type: integer
    required:
    - code
    - name
    type: object
  handler.SetMainImageRequest:
    properties:
      image_url:
        example: https://example.com/image1.jpg
        type: string
    required:
    - image_url
    type: object
  handler.UpdateImageOrderRequest:
    properties:
      images:
        items:
          $ref: '#/definitions/model.ProductImage'
        type: array
    required:
    - images
    type: object
  internal_modules_product_model.Source:
    properties:
      code:
        type: string
      id:
        type: integer
      name:
        type: string
      status:
        type: integer
    type: object
  internal_modules_product_model.Tag:
    properties:
      color:
        type: string
      description:
        type: string
      id:
        type: integer
      is_enabled:
        type: boolean
      name:
        type: string
    type: object
  internal_modules_source_model.Source:
    description: 货源信息
    properties:
      code:
        description: 货源编码
        example: APPLE001
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      name:
        description: 货源名称
        example: Apple官方旗舰店
        type: string
      remark:
        description: 备注
        example: 优质货源
        type: string
      status:
        description: 状态：1-启用，0-禁用
        example: 1
        type: integer
      updatedAt:
        type: string
    type: object
  internal_modules_tags_model.Tag:
    description: 标签信息
    properties:
      color:
        description: 标签颜色
        example: '#FF6B6B'
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      description:
        description: 标签描述
        example: 热销商品标签
        type: string
      id:
        type: integer
      is_enabled:
        description: 是否启用
        example: true
        type: boolean
      name:
        description: 标签名称
        example: 热销
        type: string
      products:
        description: 关联的商品
        items:
          $ref: '#/definitions/model.Product'
        type: array
      updatedAt:
        type: string
    type: object
  model.AdminCreateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - user
        - admin
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  model.AdminResetPasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
    required:
    - new_password
    type: object
  model.AdminUpdateUserRequest:
    properties:
      email:
        type: string
      is_active:
        type: boolean
      role:
        enum:
        - user
        - admin
        type: string
    type: object
  model.ChangePasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  model.Color:
    description: 商品颜色信息
    properties:
      code:
        description: 颜色代码
        example: BLACK
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      hex_color:
        description: 十六进制颜色值
        example: '#000000'
        type: string
      id:
        type: integer
      name:
        description: 颜色名称
        example: 黑色
        type: string
      products:
        description: 关联的商品
        items:
          $ref: '#/definitions/model.Product'
        type: array
      updatedAt:
        type: string
    type: object
  model.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/model.Response'
    type: object
  model.Pagination:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  model.Product:
    description: 商品信息
    properties:
      colors:
        description: 颜色列表
        items:
          $ref: '#/definitions/model.Color'
        type: array
      cost_price:
        description: 进货价
        example: 5999
        type: number
      createdAt:
        type: string
      deletedAt:
        type: string
      discount_price:
        description: 优惠价格
        example: 6799
        type: number
      id:
        type: integer
      images:
        description: 商品图片列表
        items:
          $ref: '#/definitions/model.ProductImage'
        type: array
      is_discounted:
        description: 是否优惠
        example: true
        type: boolean
      is_enabled:
        description: 是否启用
        example: true
        type: boolean
      name:
        description: 商品名称
        example: iPhone 14
        type: string
      price:
        description: 售价
        example: 6999
        type: number
      product_code:
        description: 商品编码（店铺编号-货号）
        example: APPLE001-IPHONE14-128G-BLACK
        type: string
      shipping_time:
        description: 发货时间
        example: 三天
        type: string
      sku:
        description: 货号
        example: IPHONE14-128G-BLACK
        type: string
      source:
        allOf:
        - $ref: '#/definitions/internal_modules_product_model.Source'
        description: 关联的货源信息
      source_id:
        description: 货源ID
        example: 1
        type: integer
      tags:
        description: 标签列表
        items:
          $ref: '#/definitions/internal_modules_product_model.Tag'
        type: array
      updatedAt:
        type: string
    type: object
  model.ProductImage:
    description: 商品图片信息
    properties:
      alt:
        description: 图片描述
        example: iPhone 14 正面照
        type: string
      is_main:
        description: 是否为主图
        example: true
        type: boolean
      sort:
        description: 排序，数字越小越靠前
        example: 1
        type: integer
      title:
        description: 图片标题
        example: 产品主图
        type: string
      url:
        description: 图片URL
        example: https://example.com/image1.jpg
        type: string
    type: object
  model.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  model.Response:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      role:
        type: string
      username:
        type: string
    type: object
  model.UpdateProfileRequest:
    properties:
      email:
        type: string
    type: object
  model.UserListResponse:
    properties:
      pagination:
        $ref: '#/definitions/model.Pagination'
      users:
        items:
          $ref: '#/definitions/model.Response'
        type: array
    type: object
  oss.STSResponse:
    properties:
      accessKeyId:
        type: string
      accessKeySecret:
        type: string
      bucket:
        type: string
      endpoint:
        type: string
      expiration:
        type: string
      region:
        type: string
      securityToken:
        type: string
    type: object
  response.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: 这是一个基于 Go 语言构建的企业资源规划（ERP）后端系统，使用 JWT 进行用户认证，PostgreSQL 作为数据库。API接口按功能模块分组，提供统一的路径结构。
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: ERP 后端系统 API
  version: "1.0"
paths:
  /api/tags:
    get:
      consumes:
      - application/json
      description: 获取所有标签列表
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/internal_modules_tags_model.Tag'
                  type: array
              type: object
      summary: 获取所有标签
      tags:
      - 标签管理
    post:
      consumes:
      - application/json
      description: 创建新的标签
      parameters:
      - description: 标签信息
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/internal_modules_tags_model.Tag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/internal_modules_tags_model.Tag'
              type: object
      summary: 创建标签
      tags:
      - 标签管理
  /api/tags/{id}:
    delete:
      consumes:
      - application/json
      description: 删除指定标签
      parameters:
      - description: 标签ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: 删除标签
      tags:
      - 标签管理
    get:
      consumes:
      - application/json
      description: 根据ID获取标签详细信息
      parameters:
      - description: 标签ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/internal_modules_tags_model.Tag'
              type: object
      summary: 获取标签详情
      tags:
      - 标签管理
    put:
      consumes:
      - application/json
      description: 更新标签信息
      parameters:
      - description: 标签ID
        in: path
        name: id
        required: true
        type: integer
      - description: 标签信息
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/internal_modules_tags_model.Tag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/internal_modules_tags_model.Tag'
              type: object
      summary: 更新标签
      tags:
      - 标签管理
  /api/tags/{id}/products:
    delete:
      consumes:
      - application/json
      description: 从指定标签移除产品
      parameters:
      - description: 标签ID
        in: path
        name: id
        required: true
        type: integer
      - description: 产品ID
        in: query
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: 从标签移除产品
      tags:
      - 标签管理
    get:
      consumes:
      - application/json
      description: 获取指定标签下的所有产品
      parameters:
      - description: 标签ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Product'
                  type: array
              type: object
      summary: 获取标签下的产品
      tags:
      - 标签管理
    post:
      consumes:
      - application/json
      description: 为指定标签添加产品
      parameters:
      - description: 标签ID
        in: path
        name: id
        required: true
        type: integer
      - description: 产品ID
        in: query
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: 为标签添加产品
      tags:
      - 标签管理
  /api/tags/enabled:
    get:
      consumes:
      - application/json
      description: 获取所有启用的标签列表
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/internal_modules_tags_model.Tag'
                  type: array
              type: object
      summary: 获取启用的标签
      tags:
      - 标签管理
  /oss/sts/token:
    get:
      description: 为前端直传获取阿里云OSS STS临时访问凭证
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oss.STSResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: 获取STS临时凭证
      tags:
      - OSS
  /product:
    get:
      consumes:
      - application/json
      description: 分页获取商品列表，支持多种筛选条件
      parameters:
      - default: 1
        description: 页码，默认1
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页数量，默认10
        in: query
        name: page_size
        type: integer
      - description: 商品名称搜索（模糊匹配）
        in: query
        name: name
        type: string
      - description: SKU精确搜索
        in: query
        name: sku
        type: string
      - description: 商品编码搜索（模糊匹配）
        in: query
        name: product_code
        type: string
      - description: 货源ID筛选
        in: query
        name: source_id
        type: integer
      - description: 最低价格
        in: query
        name: min_price
        type: number
      - description: 最高价格
        in: query
        name: max_price
        type: number
      - description: 是否优惠筛选
        in: query
        name: is_discounted
        type: boolean
      - description: 是否启用筛选
        in: query
        name: is_enabled
        type: boolean
      - collectionFormat: csv
        description: 颜色筛选（可多选）
        in: query
        items:
          type: string
        name: colors
        type: array
      - description: 发货时间筛选（模糊匹配）
        in: query
        name: shipping_time
        type: string
      - description: '排序字段: id, name, sku, product_code, price, discount_price, cost_price,
          is_discounted, is_enabled, shipping_time, created_at, updated_at'
        enum:
        - id
        - name
        - sku
        - product_code
        - price
        - discount_price
        - cost_price
        - is_discounted
        - is_enabled
        - shipping_time
        - created_at
        - updated_at
        in: query
        name: order_by
        type: string
      - description: '排序方向: asc, desc'
        enum:
        - asc
        - desc
        in: query
        name: order_dir
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  properties:
                    items:
                      items:
                        $ref: '#/definitions/model.Product'
                      type: array
                    page:
                      type: integer
                    page_size:
                      type: integer
                    total:
                      type: integer
                    total_pages:
                      type: integer
                  type: object
              type: object
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 获取商品列表
      tags:
      - 商品管理
    post:
      consumes:
      - application/json
      description: 创建新的商品信息
      parameters:
      - description: 商品信息
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handler.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 创建成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 创建商品
      tags:
      - 商品管理
  /product/{id}:
    delete:
      consumes:
      - application/json
      description: 删除指定ID的商品
      parameters:
      - description: 商品ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 删除成功
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: 商品不存在
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 删除商品
      tags:
      - 商品管理
    get:
      consumes:
      - application/json
      description: 获取指定ID的商品详细信息
      parameters:
      - description: 商品ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: 商品不存在
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 获取商品详情
      tags:
      - 商品管理
    put:
      consumes:
      - application/json
      description: 更新指定ID的商品信息
      parameters:
      - description: 商品ID
        in: path
        name: id
        required: true
        type: integer
      - description: 商品信息
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handler.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: 商品不存在
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 更新商品
      tags:
      - 商品管理
  /product/{id}/images/main:
    put:
      consumes:
      - application/json
      description: 设置商品的主图（会取消其他图片的主图状态）
      parameters:
      - description: 商品ID
        in: path
        name: id
        required: true
        type: integer
      - description: 主图URL
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.SetMainImageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 设置成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: 商品不存在
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 设置商品主图
      tags:
      - 商品管理
  /product/{id}/images/order:
    put:
      consumes:
      - application/json
      description: 更新商品的图片排序和主图设置
      parameters:
      - description: 商品ID
        in: path
        name: id
        required: true
        type: integer
      - description: 图片排序信息
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateImageOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: 商品不存在
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 更新商品图片顺序
      tags:
      - 商品管理
  /product/code/{code}:
    get:
      consumes:
      - application/json
      description: 通过SKU获取商品详情，并记录查询历史
      parameters:
      - description: 商品SKU
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: 商品不存在
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 系统错误
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 通过SKU获取商品
      tags:
      - 商品管理
  /product/colors:
    get:
      consumes:
      - application/json
      description: 获取所有颜色列表，支持排序
      parameters:
      - description: '排序字段: id, name, code, hex_color, created_at, updated_at'
        enum:
        - id
        - name
        - code
        - hex_color
        - created_at
        - updated_at
        in: query
        name: order_by
        type: string
      - description: '排序方向: asc, desc'
        enum:
        - asc
        - desc
        in: query
        name: order_dir
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Color'
                  type: array
              type: object
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 获取颜色列表
      tags:
      - 商品管理
    post:
      consumes:
      - application/json
      description: 创建新的颜色
      parameters:
      - description: 颜色信息
        in: body
        name: color
        required: true
        schema:
          $ref: '#/definitions/handler.CreateColorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 创建成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Color'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 创建颜色
      tags:
      - 商品管理
  /product/colors/{id}:
    delete:
      consumes:
      - application/json
      description: 删除指定ID的颜色
      parameters:
      - description: 颜色ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 删除成功
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: 颜色不存在
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 删除颜色
      tags:
      - 商品管理
    get:
      consumes:
      - application/json
      description: 获取指定ID的颜色详细信息
      parameters:
      - description: 颜色ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Color'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: 颜色不存在
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 获取颜色详情
      tags:
      - 商品管理
    put:
      consumes:
      - application/json
      description: 更新指定ID的颜色信息
      parameters:
      - description: 颜色ID
        in: path
        name: id
        required: true
        type: integer
      - description: 颜色信息
        in: body
        name: color
        required: true
        schema:
          $ref: '#/definitions/handler.CreateColorRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Color'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: 颜色不存在
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 更新颜色
      tags:
      - 商品管理
  /product/sku/{sku}:
    get:
      consumes:
      - application/json
      description: 通过SKU获取商品详情
      parameters:
      - description: 商品SKU
        in: path
        name: sku
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: 商品不存在
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 系统错误
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 通过SKU获取商品
      tags:
      - 商品管理
  /source:
    get:
      consumes:
      - application/json
      description: 分页获取货源列表
      parameters:
      - default: 1
        description: 页码，默认1
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页数量，默认10
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  properties:
                    items:
                      items:
                        $ref: '#/definitions/internal_modules_source_model.Source'
                      type: array
                    total:
                      type: integer
                  type: object
              type: object
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 获取货源列表
      tags:
      - 货源管理
    post:
      consumes:
      - application/json
      description: 创建新的货源信息
      parameters:
      - description: 货源信息
        in: body
        name: source
        required: true
        schema:
          $ref: '#/definitions/handler.CreateSourceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 创建成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/internal_modules_source_model.Source'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 创建货源
      tags:
      - 货源管理
  /source/{id}:
    delete:
      consumes:
      - application/json
      description: 删除指定ID的货源
      parameters:
      - description: 货源ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 删除成功
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: 货源不存在
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 删除货源
      tags:
      - 货源管理
    get:
      consumes:
      - application/json
      description: 获取指定ID的货源详细信息
      parameters:
      - description: 货源ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/internal_modules_source_model.Source'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: 货源不存在
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 获取货源详情
      tags:
      - 货源管理
    put:
      consumes:
      - application/json
      description: 更新指定ID的货源信息
      parameters:
      - description: 货源ID
        in: path
        name: id
        required: true
        type: integer
      - description: 货源信息
        in: body
        name: source
        required: true
        schema:
          $ref: '#/definitions/handler.CreateSourceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/internal_modules_source_model.Source'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: 货源不存在
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 更新货源
      tags:
      - 货源管理
  /source/active:
    get:
      consumes:
      - application/json
      description: 获取所有启用状态的货源，用于下拉选择
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/internal_modules_source_model.Source'
                  type: array
              type: object
        "401":
          description: 未授权
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 获取启用状态的货源列表
      tags:
      - 货源管理
  /user/admin/users:
    get:
      consumes:
      - application/json
      description: 获取所有用户列表（需要管理员权限）
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页数量
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.UserListResponse'
              type: object
        "401":
          description: 未授权
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "403":
          description: 权限不足
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: 获取用户列表
      tags:
      - Admin
    post:
      consumes:
      - application/json
      description: 管理员创建新用户账户
      parameters:
      - description: 用户创建信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.AdminCreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 创建成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Response'
              type: object
        "400":
          description: 请求参数错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "401":
          description: 未授权
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "403":
          description: 权限不足
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "409":
          description: 用户已存在
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "500":
          description: 服务器内部错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: 管理员创建用户
      tags:
      - Admin
  /user/admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: 管理员删除指定用户（软删除）
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 删除成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: 请求参数错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "401":
          description: 未授权
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "403":
          description: 权限不足
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "404":
          description: 用户不存在
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "500":
          description: 服务器内部错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: 管理员删除用户
      tags:
      - Admin
    put:
      consumes:
      - application/json
      description: 管理员更新用户信息
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 用户更新信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.AdminUpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Response'
              type: object
        "400":
          description: 请求参数错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "401":
          description: 未授权
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "403":
          description: 权限不足
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "404":
          description: 用户不存在
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "500":
          description: 服务器内部错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: 管理员更新用户
      tags:
      - Admin
  /user/admin/users/{id}/reset_password:
    post:
      consumes:
      - application/json
      description: 管理员重置指定用户的密码
      parameters:
      - description: 用户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 新密码
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/model.AdminResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 密码重置成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: 请求参数错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "401":
          description: 未授权
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "403":
          description: 权限不足
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "404":
          description: 用户不存在
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "500":
          description: 服务器内部错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: 管理员重置用户密码
      tags:
      - Admin
  /user/change_password:
    post:
      consumes:
      - application/json
      description: 修改当前登录用户的密码
      parameters:
      - description: 密码修改信息
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/model.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 密码修改成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: 请求参数错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "401":
          description: 原密码错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "500":
          description: 服务器内部错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: 修改密码
      tags:
      - User
  /user/login:
    post:
      consumes:
      - application/json
      description: 用户登录并获取JWT令牌
      parameters:
      - description: 用户登录信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 登录成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.LoginResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "401":
          description: 用户名或密码错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "500":
          description: 服务器内部错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      summary: 用户登录
      tags:
      - User
  /user/profile:
    get:
      consumes:
      - application/json
      description: 获取当前登录用户的详细信息
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Response'
              type: object
        "401":
          description: 未授权
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "404":
          description: 用户不存在
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: 获取用户信息
      tags:
      - User
    put:
      consumes:
      - application/json
      description: 更新当前登录用户的个人信息
      parameters:
      - description: 用户更新信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Response'
              type: object
        "400":
          description: 请求参数错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "401":
          description: 未授权
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "500":
          description: 服务器内部错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      security:
      - BearerAuth: []
      summary: 更新用户信息
      tags:
      - User
  /user/register:
    post:
      consumes:
      - application/json
      description: 创建新用户账户
      parameters:
      - description: 用户注册信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 注册成功
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Response'
              type: object
        "400":
          description: 请求参数错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "409":
          description: 用户已存在
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
        "500":
          description: 服务器内部错误
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                error:
                  type: string
              type: object
      summary: 用户注册
      tags:
      - User
securityDefinitions:
  BearerAuth:
    description: 输入 "Bearer " 加上 JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: 用户管理相关接口，包括注册、登录、资料管理等
  name: User
- description: 商品管理相关接口，包括商品的增删改查、标签管理等
  name: 商品管理
